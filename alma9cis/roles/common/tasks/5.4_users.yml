---
- name: 5.4.1.1 Ensure password expiration is configured
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    state: present
    regexp: "^PASS_MAX_DAYS.*$"
    line: "PASS_MAX_DAYS {{ logindefs_pass_max_days }}"
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.1.2 Ensure minimum password days is configured
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    state: present
    regexp: "^PASS_MIN_DAYS.*$"
    line: "PASS_MIN_DAYS {{ logindefs_pass_min_days }}"
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.1.3 Ensure password expiration warning days is configured
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    state: present
    regexp: "^PASS_WARN_AGE.*$"
    line: "PASS_WARN_AGE {{ logindefs_pass_warn_age }}"
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.1.4 Ensure strong password hashing algorithm is configured
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: "^ENCRYPT_METHOD.*$"
    line: "ENCRYPT_METHOD SHA512"
    state: present
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.1.5 Ensure inactive password lock is configured
  ansible.builtin.lineinfile:
    path: /etc/default/useradd
    state: present
    regexp: "^INACTIVE.*$"
    line: "INACTIVE={{ useradd_inactive }}"
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.1.6 Ensure all users last password change date is in the past
  ansible.builtin.command: chage -d {{ ansible_date_time.date }} --maxdays {{ logindefs_pass_max_days }} --mindays {{ logindefs_pass_min_days }} {{ ansible_ssh_user }}
  changed_when: false
  tags: users

- name: Find non-root UID=0 accounts
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      awk -F: '$3 == 0 && $1 != "root" { print $1 }' /etc/passwd
  register: uid_zero_users
  changed_when: false
  tags: users

# deletes non-root uid=0 accounts
- name: 5.4.2.1 Ensure root is the only UID 0 account
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    force: true
  with_items: "{{ uid_zero_users.stdout_lines }}"
  tags: users

- name: Find non-root GID=0 accounts
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      awk -F: '($1 !~ /^(sync|shutdown|halt|operator|root)/ && $4=="0") {print $1}' /etc/passwd
  register: gid_zero_users
  changed_when: false
  tags: users

# deletes non-root gid=0 accounts
- name: 5.4.2.2 Ensure root is the only GID 0 account
  ansible.builtin.user:
    name: "{{ item }}"
    state: absent
    force: true
  with_items: "{{ gid_zero_users.stdout_lines }}"
  when: gid_zero_users.stdout_lines | length > 0
  tags: users

- name: Find non-root GID=0 groups
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      awk -F: '$3 == 0 && $1 != "root" { print $1 }' /etc/group
  register: gid_zero_groups
  changed_when: false
  tags: users

# deletes non-root gid=0 groups
- name: 5.4.2.3 Ensure group root is the only GID 0 group
  ansible.builtin.command:
    cmd: groupdel -f "{{ item }}"
  with_items: "{{ gid_zero_groups.stdout_lines }}"
  when: gid_zero_groups.stdout_lines | length > 0
  register: groupdel
  changed_when: groupdel.rc == 0
  tags: users

- name: Ensure root is uid=0,gid=0
  ansible.builtin.user:
    name: root
    uid: 0
    group: root
  tags: users

# mkpasswd --method=sha-512 --salt=saltnvinegar --rounds=9000
- name: 5.4.2.4 Ensure root password is set
  ansible.builtin.user:
    name: root
    update_password: always
    password: "{{ root_pwhash }}"
    password_expire_max: "{{ logindefs_pass_max_days }}"
    password_expire_min: "{{ logindefs_pass_min_days }}"
  tags: users

- name: 5.4.2.5 Ensure root path integrity
  ansible.builtin.lineinfile:
    path: /root/.bashrc
    regexp: "^.*PATH=.*$"
    line: "PATH=$PATH"
  tags: users

- name: Find system accounts with a valid login shell
  ansible.builtin.shell:
    cmd: |
      set -o pipefail
      awk -F: '($1!~/^(root|halt|sync|shutdown|nfsnobody)$/ && $NF !~ "nologin" && ($3<'"$(awk '/^\s*UID_MIN/{print $2}' /etc/login.defs)"')) {print $1}' /etc/passwd
  register: system_accounts
  changed_when: false
  tags: users

# assigns nologin to system accounts
- name: 5.4.2.7 Ensure system accounts do not have a valid login shell
  ansible.builtin.user:
    shell: /sbin/nologin
    name: "{{ item }}"
  with_items: "{{ system_accounts.stdout_lines }}"
  when: system_accounts.stdout_lines | length > 0
  tags: users

- name: Find accounts without a valid login shell
  ansible.builtin.command: "awk -F: '$NF !~ \"/(sh|bash|nologin|sync|shutdown|halt)\" {print $1}' /etc/passwd"
  register: noshells
  changed_when: false
  tags: users

# locks accounts without a valid shell
- name: 5.4.2.8 Ensure accounts without a valid login shell are locked
  ansible.builtin.user:
    name: "{{ item }}"
    password_lock: true
  with_items: "{{ noshells.stdout_lines }}"
  when: noshells.stdout_lines | length > 0
  tags: users

- name: 5.4.3.1 Ensure nologin is not listed in /etc/shells
  ansible.builtin.lineinfile:
    path: /etc/shells
    regexp: '.*/sbin/nologin'
    line: "/sbin/nologin"
    state: absent
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.3.2 Ensure default user shell timeout is configured (bash)
  ansible.builtin.template:
    src: templates/profile.sh.j2
    dest: /etc/profile.d/cis.sh
    owner: root
    group: root
    mode: "0644"
  tags: users

- name: 5.4.3.2 Ensure default user shell timeout is configured (csh)
  ansible.builtin.template:
    src: templates/profile.csh.j2
    dest: /etc/profile.d/cis.csh
    owner: root
    group: root
    mode: "0644"
  tags: users

- name: 5.4.3.3 Ensure default user umask is configured (bashrc)
  ansible.builtin.replace:
    path: /etc/bashrc
    regexp: 'umask\s+[0-9]+'
    replace: "umask {{ umask }}"
    backup: "{{ create_backups }}"
  tags: users

# 5.4.2.6 Ensure root user umask is configured
- name: 5.4.3.3 Ensure default user umask is configured (profile)
  ansible.builtin.replace:
    path: /etc/profile
    regexp: 'umask\s+[0-9]+'
    replace: "umask {{ umask }}"
    backup: "{{ create_backups }}"
  tags: users

- name: 5.4.3.3 Ensure default user umask is configured (login.defs)
  ansible.builtin.lineinfile:
    path: /etc/login.defs
    regexp: 'UMASK\s+[0-9]+'
    line: "UMASK {{ umask }}"
    state: present
    backup: "{{ create_backups }}"
  tags: users
